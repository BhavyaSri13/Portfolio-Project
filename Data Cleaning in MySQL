-- DATA CLEANING PROCESS

-- Step 1: View the raw data
SELECT * 
FROM layoffs;

-- Step 2: Copy raw data to a staging table for modifications
CREATE TABLE Layoffs_staging LIKE layoffs;
INSERT INTO Layoffs_staging
SELECT * 
FROM layoffs;

-- Step 3: View the staged data
SELECT * 
FROM layoffs_staging;

-- Step 4: Identify and remove duplicates

-- Identify potential duplicate rows based on key columns
SELECT *, 
ROW_NUMBER() OVER(
    PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, 
    country, funds_raised_millions) AS row_num
FROM layoffs_staging;

-- Create a new staging table to remove duplicates
CREATE TABLE layoffs_staging2 (
  company TEXT,
  location TEXT,
  industry TEXT,
  total_laid_off INT DEFAULT NULL,
  percentage_laid_off TEXT,
  `date` TEXT,
  stage TEXT,
  country TEXT,
  funds_raised_millions INT DEFAULT NULL,
  row_num INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Insert data into the new table, with a row number for duplicates
INSERT INTO layoffs_staging2
SELECT *, 
ROW_NUMBER() OVER(
    PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, 
    country, funds_raised_millions) AS row_num
FROM layoffs_staging;

-- Delete duplicate rows from the new staging table
DELETE
FROM layoffs_staging2
WHERE row_num > 1;

-- Step 5: Standardize the data

-- Trim leading and trailing spaces from the 'company' column
UPDATE layoffs_staging2
SET company = TRIM(company);

-- Standardize values in the 'industry' column, e.g., consolidating 'Crypto' variations
UPDATE layoffs_staging2
SET industry = 'Crypto'
WHERE industry LIKE 'Crypto%';

-- Standardize country names
UPDATE layoffs_staging2
SET country = 'United States'
WHERE country LIKE 'United States%';

-- Convert 'date' column from text to date format (MM/DD/YYYY)
UPDATE layoffs_staging2
SET `date` = STR_TO_DATE(`date`, '%m/%d/%Y');

-- Modify the 'date' column to be of DATE type
ALTER TABLE layoffs_staging2
MODIFY COLUMN `date` DATE;

-- Step 6: Handle NULL and blank values

-- Identify rows with NULL or blank values in the 'industry' column
SELECT * 
FROM layoffs_staging2
WHERE industry IS NULL OR industry = '';

-- Fill NULL or blank industry values based on other rows with matching company/location
UPDATE layoffs_staging2 t1
JOIN layoffs_staging2 t2
    ON t1.company = t2.company
SET t1.industry = t2.industry
WHERE t1.industry IS NULL 
AND t2.industry IS NOT NULL;

-- Remove rows with NULL values in both 'total_laid_off' and 'percentage_laid_off'
DELETE 
FROM layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

-- Step 7: Final cleanup

-- Remove the 'row_num' column used for identifying duplicates
ALTER TABLE layoffs_staging2
DROP COLUMN row_num;

-- View the cleaned data
SELECT * 
FROM layoffs_staging2;
